/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DAppInteraction as PrismaDAppInteraction,
  User as PrismaUser,
} from "@prisma/client";

export class DAppInteractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DAppInteractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dAppInteraction.count(args);
  }

  async dAppInteractions<T extends Prisma.DAppInteractionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DAppInteractionFindManyArgs>
  ): Promise<PrismaDAppInteraction[]> {
    return this.prisma.dAppInteraction.findMany<Prisma.DAppInteractionFindManyArgs>(
      args
    );
  }
  async dAppInteraction<T extends Prisma.DAppInteractionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DAppInteractionFindUniqueArgs>
  ): Promise<PrismaDAppInteraction | null> {
    return this.prisma.dAppInteraction.findUnique(args);
  }
  async createDAppInteraction<T extends Prisma.DAppInteractionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DAppInteractionCreateArgs>
  ): Promise<PrismaDAppInteraction> {
    return this.prisma.dAppInteraction.create<T>(args);
  }
  async updateDAppInteraction<T extends Prisma.DAppInteractionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DAppInteractionUpdateArgs>
  ): Promise<PrismaDAppInteraction> {
    return this.prisma.dAppInteraction.update<T>(args);
  }
  async deleteDAppInteraction<T extends Prisma.DAppInteractionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DAppInteractionDeleteArgs>
  ): Promise<PrismaDAppInteraction> {
    return this.prisma.dAppInteraction.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dAppInteraction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
