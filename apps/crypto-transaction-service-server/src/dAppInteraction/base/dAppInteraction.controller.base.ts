/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DAppInteractionService } from "../dAppInteraction.service";
import { DAppInteractionCreateInput } from "./DAppInteractionCreateInput";
import { DAppInteraction } from "./DAppInteraction";
import { DAppInteractionFindManyArgs } from "./DAppInteractionFindManyArgs";
import { DAppInteractionWhereUniqueInput } from "./DAppInteractionWhereUniqueInput";
import { DAppInteractionUpdateInput } from "./DAppInteractionUpdateInput";

export class DAppInteractionControllerBase {
  constructor(protected readonly service: DAppInteractionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DAppInteraction })
  async createDAppInteraction(
    @common.Body() data: DAppInteractionCreateInput
  ): Promise<DAppInteraction> {
    return await this.service.createDAppInteraction({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DAppInteraction] })
  @ApiNestedQuery(DAppInteractionFindManyArgs)
  async dAppInteractions(
    @common.Req() request: Request
  ): Promise<DAppInteraction[]> {
    const args = plainToClass(DAppInteractionFindManyArgs, request.query);
    return this.service.dAppInteractions({
      ...args,
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DAppInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dAppInteraction(
    @common.Param() params: DAppInteractionWhereUniqueInput
  ): Promise<DAppInteraction | null> {
    const result = await this.service.dAppInteraction({
      where: params,
      select: {
        action: true,
        createdAt: true,
        details: true,
        id: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DAppInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDAppInteraction(
    @common.Param() params: DAppInteractionWhereUniqueInput,
    @common.Body() data: DAppInteractionUpdateInput
  ): Promise<DAppInteraction | null> {
    try {
      return await this.service.updateDAppInteraction({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          action: true,
          createdAt: true,
          details: true,
          id: true,
          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DAppInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDAppInteraction(
    @common.Param() params: DAppInteractionWhereUniqueInput
  ): Promise<DAppInteraction | null> {
    try {
      return await this.service.deleteDAppInteraction({
        where: params,
        select: {
          action: true,
          createdAt: true,
          details: true,
          id: true,
          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
