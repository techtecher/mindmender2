/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DAppInteraction } from "./DAppInteraction";
import { DAppInteractionCountArgs } from "./DAppInteractionCountArgs";
import { DAppInteractionFindManyArgs } from "./DAppInteractionFindManyArgs";
import { DAppInteractionFindUniqueArgs } from "./DAppInteractionFindUniqueArgs";
import { CreateDAppInteractionArgs } from "./CreateDAppInteractionArgs";
import { UpdateDAppInteractionArgs } from "./UpdateDAppInteractionArgs";
import { DeleteDAppInteractionArgs } from "./DeleteDAppInteractionArgs";
import { User } from "../../user/base/User";
import { DAppInteractionService } from "../dAppInteraction.service";
@graphql.Resolver(() => DAppInteraction)
export class DAppInteractionResolverBase {
  constructor(protected readonly service: DAppInteractionService) {}

  async _dAppInteractionsMeta(
    @graphql.Args() args: DAppInteractionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DAppInteraction])
  async dAppInteractions(
    @graphql.Args() args: DAppInteractionFindManyArgs
  ): Promise<DAppInteraction[]> {
    return this.service.dAppInteractions(args);
  }

  @graphql.Query(() => DAppInteraction, { nullable: true })
  async dAppInteraction(
    @graphql.Args() args: DAppInteractionFindUniqueArgs
  ): Promise<DAppInteraction | null> {
    const result = await this.service.dAppInteraction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DAppInteraction)
  async createDAppInteraction(
    @graphql.Args() args: CreateDAppInteractionArgs
  ): Promise<DAppInteraction> {
    return await this.service.createDAppInteraction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DAppInteraction)
  async updateDAppInteraction(
    @graphql.Args() args: UpdateDAppInteractionArgs
  ): Promise<DAppInteraction | null> {
    try {
      return await this.service.updateDAppInteraction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DAppInteraction)
  async deleteDAppInteraction(
    @graphql.Args() args: DeleteDAppInteractionArgs
  ): Promise<DAppInteraction | null> {
    try {
      return await this.service.deleteDAppInteraction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: DAppInteraction
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
